class Solution(object):
    def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        if len(nums) == 0:
            return -1
        if len(nums) == 1:
            if nums[0] == target:
                return 0
            else:
                return -1
        p = find_p(nums, 0, len(nums))
        
        print p
        
        if p == 0:
            return binary(nums, target, 0, len(nums))
            
        elif nums[0] <= target <= nums[p-1]:
            #print "jj"
            return binary(nums[:p], target, 0, len(nums[:p]))
            
        elif nums[p] <= target <= nums[-1]:
            a = binary(nums[p:], target, 0, len(nums[p:]))
            if a == -1:
                return a
            else:
                return a+p
        else:
            return -1
            
def find_p(nums, l, h):
    m = l + ((h-l)/2)
    #print nums[m]
    if m == len(nums)-1:
        if nums[m-1] > nums[m]:
            return m
        else:
            return m-1
    elif m == 0:
        if nums[m+1] < nums[m]:
            return m+1
        else:
            return m
    elif nums[m-1] > nums[m] < nums[m+1]:
        return m
    elif nums[0] > nums[m]:
        print "sd"
        return find_p(nums, l, m-1)
    else:
        return find_p(nums,m+1, h)
        
def binary(nums, x, l,h):
    m = l + ((h-l)/2)
    #print m, nums
    #print l,h
    if l > h:
        return -1
    elif m >= len(nums) or m < 0 :
        return -1
    elif nums[m] == x:
        return m
    elif nums[m] < x:
        #print "asd"
        return binary(nums, x, m+1,h)
    elif nums[m] > x:
        return binary(nums, x, l, m-1)
    else:
        return -1
